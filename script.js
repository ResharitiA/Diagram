class NetworkDiagram {
    constructor() {
        this.placedObjects = [];
        this.connections = [];
        this.selectedObject = null;
        this.selectedCableType = null;
        this.isDragging = false;
        this.isConnecting = false;
        this.connectionStart = null;
        this.dragStartX = 0;
        this.dragStartY = 0;
        this.originalX = 0;
        this.originalY = 0;
        
        // –í—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
        this.isSelecting = false;
        this.selectionStart = { x: 0, y: 0 };
        this.selectionEnd = { x: 0, y: 0 };
        this.selectionRect = null;
        this.multiSelectedObjects = [];
        
        // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        this.scale = 1;
        this.minScale = 0.3;
        this.maxScale = 3;
        this.scaleStep = 0.1;
        
        // –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è Ctrl+Z/Ctrl+Y
        this.history = [];
        this.historyIndex = -1;
        this.maxHistorySize = 50;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏
        this.isPanning = false;
        this.panStartX = 0;
        this.panStartY = 0;
    this.panX = 0;
    this.panY = 0;
    this.originalPanX = 0;
    this.originalPanY = 0;
        
        this.init();
    }

    init() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        this.setupEventListeners();
        this.setupContextMenu();
        this.setupConnectionsLayer();
        this.setupZoomControls();
        this.updatePlacedObjectsList();
        this.updateConnectionsList();
        this.updateZoomDisplay();
        this.saveState();
    }

    setupEventListeners() {
        // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –ø–∞–Ω–µ–ª–∏
        document.querySelectorAll('.object-item').forEach(item => {
            item.addEventListener('dragstart', this.handleDragStart.bind(this));
        });

        // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–∞–±–µ–ª—è
        document.querySelectorAll('.cable-item').forEach(item => {
            item.addEventListener('click', (e) => {
                this.selectCableType(e.currentTarget.dataset.type);
            });
        });

        // –†–∞–±–æ—á–µ–µ –ø–æ–ª–µ
        const workspace = document.querySelector('.workspace');
        workspace.addEventListener('dragover', this.handleDragOver.bind(this));
        workspace.addEventListener('drop', this.handleDrop.bind(this));
        workspace.addEventListener('mousedown', this.handleWorkspaceMouseDown.bind(this));
        workspace.addEventListener('contextmenu', this.handleWorkspaceContextMenu.bind(this));
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        document.addEventListener('mousemove', this.handleMouseMove.bind(this));
        document.addEventListener('mouseup', this.handleMouseUp.bind(this));
        document.addEventListener('keydown', this.handleKeyDown.bind(this));
        document.addEventListener('wheel', this.handleWheel.bind(this), { passive: false });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        document.getElementById('exportBtn').addEventListener('click', () => this.exportToJSON());
        document.getElementById('importBtn').addEventListener('click', () => {
            document.getElementById('importFile').click();
        });
        document.getElementById('importFile').addEventListener('change', (e) => {
            if (e.target.files[0]) {
                this.importFromJSON(e.target.files[0]);
            }
        });
        document.getElementById('clearBtn').addEventListener('click', () => this.clearWorkspace());
        document.getElementById('undoBtn').addEventListener('click', () => this.undo());
        document.getElementById('redoBtn').addEventListener('click', () => this.redo());

        console.log('–°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    }

    handleWorkspaceMouseDown(e) {
        // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ - –Ω–∞—á–∞–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
        if (e.button === 0 && !this.isConnecting && !this.isDragging) {
            e.preventDefault();
            e.stopPropagation();
            this.startSelection(e);
        }

        // –°—Ä–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ –∏–ª–∏ –∫–æ–ª–µ—Å–æ ‚Äî –Ω–∞—á–∞–ª–æ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è (drag to pan)
        if (e.button === 1) {
            e.preventDefault();
            e.stopPropagation();
            this.isPanning = true;
            this.panStartX = e.clientX;
            this.panStartY = e.clientY;
            this.originalPanX = this.panX;
            this.originalPanY = this.panY;
            document.body.style.cursor = 'grabbing';
        }
    }

    handleWorkspaceContextMenu(e) {
        // –ü—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ - –ø–æ–∫–∞–∑ –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        if (this.multiSelectedObjects.length > 0) {
            e.preventDefault();
            e.stopPropagation();
            this.showMultiSelectionContextMenu(e);
        }
    }

    startSelection(e) {
        const workspace = document.querySelector('.workspace');
        const rect = workspace.getBoundingClientRect();
        
        this.isSelecting = true;
        this.selectionStart = {
            x: e.clientX - rect.left,
            y: e.clientY - rect.top
        };
        this.selectionEnd = { ...this.selectionStart };
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        this.selectionRect = document.createElement('div');
        this.selectionRect.className = 'selection-rect';
        workspace.appendChild(this.selectionRect);
        
        this.updateSelectionRect();
        console.log('–ù–∞—á–∞–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏:', this.selectionStart);
    }

    updateSelectionRect() {
        if (!this.selectionRect) return;
        
        const left = Math.min(this.selectionStart.x, this.selectionEnd.x);
        const top = Math.min(this.selectionStart.y, this.selectionEnd.y);
        const width = Math.abs(this.selectionEnd.x - this.selectionStart.x);
        const height = Math.abs(this.selectionEnd.y - this.selectionStart.y);
        
        this.selectionRect.style.left = left + 'px';
        this.selectionRect.style.top = top + 'px';
        this.selectionRect.style.width = width + 'px';
        this.selectionRect.style.height = height + 'px';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
        this.updateMultiSelection(left, top, width, height);
    }

    updateMultiSelection(rectLeft, rectTop, rectWidth, rectHeight) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        this.multiSelectedObjects.forEach(obj => {
            obj.element.classList.remove('multi-selected');
        });
        this.multiSelectedObjects = [];
        
        const workspaceInner = document.getElementById('workspaceInner');
        const workspaceRect = workspaceInner.getBoundingClientRect();
        const scale = this.scale;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–±–æ—á–µ–π –æ–±–ª–∞—Å—Ç–∏
        const selectionLeft = (rectLeft - workspaceRect.left) / scale;
        const selectionTop = (rectTop - workspaceRect.top) / scale;
        const selectionWidth = rectWidth / scale;
        const selectionHeight = rectHeight / scale;
        
        // –í—ã–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã, –ø–æ–ø–∞–¥–∞—é—â–∏–µ –≤ –æ–±–ª–∞—Å—Ç—å
        this.placedObjects.forEach(obj => {
            const objLeft = obj.x;
            const objTop = obj.y;
            const objRight = obj.x + 80;
            const objBottom = obj.y + 80;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å –æ–±–ª–∞—Å—Ç—å—é –≤—ã–¥–µ–ª–µ–Ω–∏—è
            if (objLeft < selectionLeft + selectionWidth &&
                objRight > selectionLeft &&
                objTop < selectionTop + selectionHeight &&
                objBottom > selectionTop) {
                
                obj.element.classList.add('multi-selected');
                this.multiSelectedObjects.push(obj);
            }
        });
        
        console.log('–í—ã–¥–µ–ª–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:', this.multiSelectedObjects.length);
    }

    finishSelection() {
        if (this.isSelecting && this.selectionRect) {
            this.selectionRect.remove();
            this.selectionRect = null;
            this.isSelecting = false;
            
            console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–¥–µ–ª–µ–Ω–∏–µ. –û–±—ä–µ–∫—Ç–æ–≤ –≤—ã–¥–µ–ª–µ–Ω–æ:', this.multiSelectedObjects.length);
        }
    }

    showMultiSelectionContextMenu(e) {
        this.hideContextMenu();

        const contextMenu = document.createElement('div');
        contextMenu.id = 'contextMenu';
        contextMenu.style.position = 'fixed';
        contextMenu.style.background = 'white';
        contextMenu.style.border = '1px solid #ddd';
        contextMenu.style.borderRadius = '6px';
        contextMenu.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
        contextMenu.style.zIndex = '10000';
        contextMenu.style.minWidth = '200px';
        contextMenu.style.padding = '4px 0';
        
        contextMenu.innerHTML = `
            <div class="context-menu-item" id="contextDeleteMultiple" style="padding: 10px 16px; cursor: pointer; font-size: 14px; transition: background-color 0.2s; border-bottom: 1px solid #f0f0f0;">
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (${this.multiSelectedObjects.length})
            </div>
            <div class="context-menu-item" id="contextClearSelection" style="padding: 10px 16px; cursor: pointer; font-size: 14px; transition: background-color 0.2s;">
                ‚ùå –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            </div>
        `;

        contextMenu.style.left = e.clientX + 'px';
        contextMenu.style.top = e.clientY + 'px';

        document.body.appendChild(contextMenu);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
        setTimeout(() => {
            document.getElementById('contextDeleteMultiple').addEventListener('click', () => {
                this.deleteMultipleObjects();
            });
            document.getElementById('contextDeleteMultiple').addEventListener('mouseenter', function() {
                this.style.background = '#007bff';
                this.style.color = 'white';
            });
            document.getElementById('contextDeleteMultiple').addEventListener('mouseleave', function() {
                this.style.background = '';
                this.style.color = '';
            });
            
            document.getElementById('contextClearSelection').addEventListener('click', () => {
                this.clearMultiSelection();
            });
            document.getElementById('contextClearSelection').addEventListener('mouseenter', function() {
                this.style.background = '#007bff';
                this.style.color = 'white';
            });
            document.getElementById('contextClearSelection').addEventListener('mouseleave', function() {
                this.style.background = '';
                this.style.color = '';
            });
        }, 0);
    }

    deleteMultipleObjects() {
        if (this.multiSelectedObjects.length === 0) return;
        
        if (confirm(`–£–¥–∞–ª–∏—Ç—å ${this.multiSelectedObjects.length} –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤?`)) {
            // –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏
            const objectIds = this.multiSelectedObjects.map(obj => obj.id);
            this.connections = this.connections.filter(conn => 
                !objectIds.includes(conn.from) && !objectIds.includes(conn.to)
            );
            
            // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã
            this.multiSelectedObjects.forEach(obj => {
                const index = this.placedObjects.findIndex(placedObj => placedObj.id === obj.id);
                if (index !== -1) {
                    this.placedObjects.splice(index, 1);
                    obj.element.remove();
                }
            });
            
            this.multiSelectedObjects = [];
            this.selectedObject = null;
            this.updatePlacedObjectsList();
            this.updateConnectionsList();
            this.renderConnections();
            this.saveState();
            this.hideContextMenu();
            
            console.log(`–£–¥–∞–ª–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${this.multiSelectedObjects.length}`);
        }
    }

    clearMultiSelection() {
        this.multiSelectedObjects.forEach(obj => {
            obj.element.classList.remove('multi-selected');
        });
        this.multiSelectedObjects = [];
        this.hideContextMenu();
    }

    setupZoomControls() {
        document.getElementById('zoomIn').addEventListener('click', () => this.zoomIn());
        document.getElementById('zoomOut').addEventListener('click', () => this.zoomOut());
        document.getElementById('zoomReset').addEventListener('click', () => this.zoomReset());
    }

    zoomIn() {
        // Zoom around center of viewport
        const workspace = document.getElementById('workspaceInner');
        const rect = workspace.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        this._zoomAnchor = { clientX: centerX, clientY: centerY };
        this.setScale(this.scale + this.scaleStep);
    }

    zoomOut() {
        const workspace = document.getElementById('workspaceInner');
        const rect = workspace.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        this._zoomAnchor = { clientX: centerX, clientY: centerY };
        this.setScale(this.scale - this.scaleStep);
    }

    zoomReset() {
        const workspace = document.getElementById('workspaceInner');
        const rect = workspace.getBoundingClientRect();
        const centerX = rect.left + rect.width / 2;
        const centerY = rect.top + rect.height / 2;
        this._zoomAnchor = { clientX: centerX, clientY: centerY };
        this.setScale(1);
    }

    setScale(newScale) {
        newScale = Math.max(this.minScale, Math.min(this.maxScale, newScale));
        if (newScale === this.scale) return;

        // –ò–∑–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
        // –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∫—É—Ä—Å–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∑—É–º–∞
        const workspace = document.getElementById('workspaceInner');
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (panX/panY)
        let currentX = this.panX;
        let currentY = this.panY;

        // –ï—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–Ω–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        // –í –Ω–∞—à–µ–º –∫–æ–¥–µ setScale –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω —Å this._zoomAnchor {clientX, clientY}
        if (this._zoomAnchor) {
            const rect = workspace.getBoundingClientRect();
            const clientX = this._zoomAnchor.clientX;
            const clientY = this._zoomAnchor.clientY;

            // –ü–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–∏–¥–∏–º–æ–π —á–∞—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ (–ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞)
            const mouseX = clientX - rect.left; // —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ clientX - panX
            const mouseY = clientY - rect.top;

            // –¢–æ—á–∫–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            const worldX = mouseX / this.scale;
            const worldY = mouseY / this.scale;

            // –ù–æ–≤—ã–µ pan, —á—Ç–æ–±—ã —Ç–∞ –∂–µ world-—Ç–æ—á–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –ø–æ–¥ —Ç–µ–º –∂–µ —ç–∫—Ä–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—ÇX/clientY
            const newPanX = clientX - worldX * newScale;
            const newPanY = clientY - worldY * newScale;

            this.panX = newPanX;
            this.panY = newPanY;

            // –û—á–∏—Å—Ç–∏–º —è–∫–æ—Ä—å –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            this._zoomAnchor = null;
        } else {
            // –ë–µ–∑ —è–∫–æ—Ä—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–º–µ—â–µ–Ω–∏–µ (–ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
            this.panX = currentX;
            this.panY = currentY;
        }

    // Use scale first, then translate so panX/panY represent screen pixels
    workspace.style.transform = `scale(${newScale}) translate(${this.panX}px, ${this.panY}px)`;
        this.scale = newScale;
        this.updateZoomDisplay();
        this.applyScale();
    }

    applyScale() {
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ transform
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏
        const grid = document.getElementById('grid');
        const gridSize = 20 * this.scale;
        grid.style.backgroundSize = `${gridSize}px ${gridSize}px`;
    }

    updateZoomDisplay() {
        const zoomLevel = document.getElementById('zoomLevel');
        zoomLevel.textContent = Math.round(this.scale * 100) + '%';
    }

    handleWheel(e) {
        if (e.ctrlKey) {
            e.preventDefault();
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∫–æ—Ä—å –∑—É–º–∞ ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—Å–æ—Ä–∞ ‚Äî –∏ –≤—ã–∑—ã–≤–∞–µ–º setScale
            // (setScale —Å–∞–º –ø–æ—Å—á–∏—Ç–∞–µ—Ç –Ω–æ–≤—ã–µ panX/panY)
            this._zoomAnchor = { clientX: e.clientX, clientY: e.clientY };
            const delta = e.deltaY > 0 ? -this.scaleStep : this.scaleStep;
            const newScale = Math.max(this.minScale, Math.min(this.maxScale, this.scale + delta));
            this.setScale(newScale);
        }
    }

    setupConnectionsLayer() {
        const connectionsLayer = document.getElementById('connectionsLayer');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –¥–ª—è —Å—Ç—Ä–µ–ª–æ–∫
        const defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
        const marker = document.createElementNS('http://www.w3.org/2000/svg', 'marker');
        marker.setAttribute('id', 'arrowhead');
        marker.setAttribute('markerWidth', '10');
        marker.setAttribute('markerHeight', '7');
        marker.setAttribute('refX', '9');
        marker.setAttribute('refY', '3.5');
        marker.setAttribute('orient', 'auto');
        
        const polygon = document.createElementNS('http://www.w3.org/2000/svg', 'polygon');
        polygon.setAttribute('points', '0 0, 10 3.5, 0 7');
        polygon.setAttribute('fill', '#666');
        
        marker.appendChild(polygon);
        defs.appendChild(marker);
        connectionsLayer.appendChild(defs);
    }

    selectCableType(cableType) {
        document.querySelectorAll('.cable-item').forEach(item => {
            item.classList.remove('selected');
        });
        
        const selectedCable = document.querySelector(`.cable-item[data-type="${cableType}"]`);
        if (selectedCable) {
            selectedCable.classList.add('selected');
        }
        
        this.selectedCableType = cableType;
        document.getElementById('currentCableType').textContent = this.getCableLabel(cableType);
        
        console.log('–í—ã–±—Ä–∞–Ω —Ç–∏–ø –∫–∞–±–µ–ª—è:', cableType);
    }

    getCableLabel(cableType) {
        const labels = {
            ethernet: 'Ethernet',
            fiber: '–û–ø—Ç–æ–≤–æ–ª–æ–∫–Ω–æ',
            coaxial: '–ö–æ–∞–∫—Å–∏–∞–ª—å–Ω—ã–π',
            serial: '–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π'
        };
        return labels[cableType] || cableType;
    }

    setupContextMenu() {
        document.addEventListener('contextmenu', (e) => {
            const placedObject = e.target.closest('.placed-object');
            if (placedObject) {
                e.preventDefault();
                this.showContextMenu(e, placedObject);
            }
        });

        document.addEventListener('click', () => {
            this.hideContextMenu();
        });
    }

    showContextMenu(e, objectElement) {
        this.hideContextMenu();

        const objectId = objectElement.id;
        const object = this.placedObjects.find(obj => obj.id === objectId);
        
        if (!object) return;

        this.selectedObject = object;

        const contextMenu = document.createElement('div');
        contextMenu.id = 'contextMenu';
        contextMenu.style.position = 'fixed';
        contextMenu.style.background = 'white';
        contextMenu.style.border = '1px solid #ddd';
        contextMenu.style.borderRadius = '6px';
        contextMenu.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
        contextMenu.style.zIndex = '10000';
        contextMenu.style.minWidth = '160px';
        contextMenu.style.padding = '4px 0';
        
        contextMenu.innerHTML = `
            <div class="context-menu-item" id="contextDelete" style="padding: 8px 16px; cursor: pointer; font-size: 14px; transition: background-color 0.2s;">
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç
            </div>
            <div class="context-menu-item" id="contextConnect" style="padding: 8px 16px; cursor: pointer; font-size: 14px; transition: background-color 0.2s;">
                üîó –°–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            </div>
        `;

        contextMenu.style.left = e.clientX + 'px';
        contextMenu.style.top = e.clientY + 'px';

        document.body.appendChild(contextMenu);

        setTimeout(() => {
            document.getElementById('contextDelete').addEventListener('click', () => {
                this.deleteSelectedObject();
            });
            document.getElementById('contextDelete').addEventListener('mouseenter', function() {
                this.style.background = '#007bff';
                this.style.color = 'white';
            });
            document.getElementById('contextDelete').addEventListener('mouseleave', function() {
                this.style.background = '';
                this.style.color = '';
            });
            
            document.getElementById('contextConnect').addEventListener('click', () => {
                this.startConnectionFromMenu();
            });
            document.getElementById('contextConnect').addEventListener('mouseenter', function() {
                this.style.background = '#007bff';
                this.style.color = 'white';
            });
            document.getElementById('contextConnect').addEventListener('mouseleave', function() {
                this.style.background = '';
                this.style.color = '';
            });
        }, 0);
    }

    startConnectionFromMenu() {
        if (this.selectedObject && this.selectedCableType) {
            this.isConnecting = true;
            this.connectionStart = this.selectedObject;
            this.hideContextMenu();
            console.log('–ù–∞—á–∞–ª–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç –æ–±—ä–µ–∫—Ç–∞:', this.selectedObject.id);
        } else if (!this.selectedCableType) {
            alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞–±–µ–ª—è –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏!');
        }
    }

    hideContextMenu() {
        const contextMenu = document.getElementById('contextMenu');
        if (contextMenu) {
            contextMenu.remove();
        }
    }

    deleteSelectedObject() {
        if (this.selectedObject) {
            this.connections = this.connections.filter(conn => 
                conn.from !== this.selectedObject.id && conn.to !== this.selectedObject.id
            );
            this.deleteObject(this.selectedObject);
            this.hideContextMenu();
            this.updateConnectionsList();
            this.renderConnections();
        }
    }

    handleDragStart(e) {
        const type = e.target.closest('.object-item').dataset.type;
        e.dataTransfer.setData('text/plain', type);
        console.log('–ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ:', type);
    }

    handleDragOver(e) {
        e.preventDefault();
    }

    handleDrop(e) {
        e.preventDefault();
        const type = e.dataTransfer.getData('text/plain');
        const workspaceInner = document.getElementById('workspaceInner');
        const rect = workspaceInner.getBoundingClientRect();
        
        const scale = this.scale;
        const x = (e.clientX - rect.left) / scale - 40;
        const y = (e.clientY - rect.top) / scale - 40;
        
        console.log('–û–±—ä–µ–∫—Ç —Ä–∞–∑–º–µ—â–µ–Ω:', type, '–≤ –ø–æ–∑–∏—Ü–∏–∏', x, y, '–º–∞—Å—à—Ç–∞–±:', scale);
        this.createObject(type, x, y);
        this.saveState();
    }

    createObject(type, x, y) {
        const id = 'obj_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        
        const object = {
            id,
            type,
            x,
            y,
            element: null,
            connectionPoint: null
        };

        this.placedObjects.push(object);
        this.renderObject(object);
        this.updatePlacedObjectsList();
        
        console.log('–°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç:', object);
    }

    renderObject(object) {
        const container = document.getElementById('objectsContainer');
        
        const element = document.createElement('div');
        element.className = 'placed-object';
        element.id = object.id;
        element.style.left = object.x + 'px';
        element.style.top = object.y + 'px';
        
        const icons = {
            router: 'üîÑ',
            switch: 'üîÄ',
            server: 'üñ•Ô∏è',
            pc: 'üíª',
            firewall: 'üî•'
        };
        
        const labels = {
            router: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä',
            switch: '–ö–æ–º–º—É—Ç–∞—Ç–æ—Ä',
            server: '–°–µ—Ä–≤–µ—Ä',
            pc: '–ö–æ–º–ø—å—é—Ç–µ—Ä',
            firewall: '–§–∞–µ—Ä–≤–æ–ª'
        };

        element.innerHTML = `
            <div class="icon">${icons[object.type]}</div>
            <div class="label">${labels[object.type]}</div>
        `;

        const connectionPoint = document.createElement('div');
        connectionPoint.className = 'connection-point';
        connectionPoint.style.left = '34px';
        connectionPoint.style.top = '34px';
        connectionPoint.addEventListener('mousedown', (e) => this.startConnection(e, object));
        element.appendChild(connectionPoint);
        object.connectionPoint = connectionPoint;

        element.addEventListener('mousedown', (e) => this.startDragging(e, object));
        element.addEventListener('click', (e) => {
            if (this.isConnecting && this.connectionStart && this.connectionStart.id !== object.id) {
                this.finishConnection(object);
                return;
            }
            e.stopPropagation();
            this.selectObject(object);
        });
        
        container.appendChild(element);
        object.element = element;
        
        console.log('–û–±—ä–µ–∫—Ç –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω:', object.id);
    }

    startConnection(e, object) {
        if (!this.selectedCableType) {
            alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞–±–µ–ª—è –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏!');
            return;
        }
        
        e.stopPropagation();
        this.isConnecting = true;
        this.connectionStart = object;
        console.log('–ù–∞—á–∞–ª–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç –æ–±—ä–µ–∫—Ç–∞:', object.id);
    }

    finishConnection(targetObject) {
        if (!this.connectionStart || !this.selectedCableType) return;

        const connection = {
            id: 'conn_' + Date.now(),
            from: this.connectionStart.id,
            to: targetObject.id,
            type: this.selectedCableType
        };

        const existingConnection = this.connections.find(conn => 
            (conn.from === connection.from && conn.to === connection.to) ||
            (conn.from === connection.to && conn.to === connection.from)
        );

        if (!existingConnection) {
            this.connections.push(connection);
            this.renderConnection(connection);
            this.updateConnectionsList();
            this.saveState();
            console.log('–°–æ–∑–¥–∞–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:', connection);
        } else {
            console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        this.isConnecting = false;
        this.connectionStart = null;
    }

    renderConnection(connection) {
        const connectionsLayer = document.getElementById('connectionsLayer');
        
        const fromObject = this.placedObjects.find(obj => obj.id === connection.from);
        const toObject = this.placedObjects.find(obj => obj.id === connection.to);
        
        if (!fromObject || !toObject) return;

        const fromX = fromObject.x + 40;
        const fromY = fromObject.y + 40;
        const toX = toObject.x + 40;
        const toY = toObject.y + 40;

        const line = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        
        const dx = toX - fromX;
        const dy = toY - fromY;
        const controlX1 = fromX + dx * 0.5;
        const controlY1 = fromY;
        const controlX2 = fromX + dx * 0.5;
        const controlY2 = toY;
        
        const pathData = `M ${fromX} ${fromY} C ${controlX1} ${controlY1}, ${controlX2} ${controlY2}, ${toX} ${toY}`;
        
        line.setAttribute('d', pathData);
        line.setAttribute('class', `connection ${connection.type}`);
        line.setAttribute('data-connection-id', connection.id);
        line.setAttribute('marker-end', 'url(#arrowhead)');
        
        connectionsLayer.appendChild(line);
        connection.element = line;
    }

    renderConnections() {
        const connectionsLayer = document.getElementById('connectionsLayer');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º defs
        const defs = connectionsLayer.querySelector('defs');
        // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const connections = connectionsLayer.querySelectorAll('.connection');
        connections.forEach(conn => conn.remove());
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º defs –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã
        if (!connectionsLayer.querySelector('defs') && defs) {
            connectionsLayer.appendChild(defs);
        }
        
        this.connections.forEach(connection => {
            this.renderConnection(connection);
        });
    }

    updateConnectionsList() {
        const list = document.getElementById('connectionsList');
        list.innerHTML = '';
        
        this.connections.forEach(conn => {
            const fromObject = this.placedObjects.find(obj => obj.id === conn.from);
            const toObject = this.placedObjects.find(obj => obj.id === conn.to);
            
            if (fromObject && toObject) {
                const item = document.createElement('div');
                item.className = 'connection-item';
                item.innerHTML = `
                    <div class="cable-icon ${conn.type}">${this.getCableIcon(conn.type)}</div>
                    <span>${this.getCableLabel(conn.type)}: ${fromObject.type} ‚Üí ${toObject.type}</span>
                `;
                list.appendChild(item);
            }
        });
    }

    getCableIcon(cableType) {
        const icons = {
            ethernet: 'üîó',
            fiber: 'üîÜ',
            coaxial: '‚õìÔ∏è',
            serial: 'üîå'
        };
        return icons[cableType] || 'üîó';
    }

    startDragging(e, object) {
        if (this.isConnecting) return;
        
        console.log('–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:', object.id);
        
        this.isDragging = true;
        this.selectedObject = object;
        
        const workspaceInner = document.getElementById('workspaceInner');
        const rect = workspaceInner.getBoundingClientRect();
        const scale = this.scale;
        
        this.dragStartX = (e.clientX - rect.left) / scale - object.x;
        this.dragStartY = (e.clientY - rect.top) / scale - object.y;
        this.originalX = object.x;
        this.originalY = object.y;
        
        object.element.style.cursor = 'grabbing';
        object.element.style.zIndex = '1000';
        object.element.classList.add('selected');
        
        e.preventDefault();
        e.stopPropagation();
    }

    handleMouseMove(e) {
        if (this.isPanning) {
            const deltaX = e.clientX - this.panStartX;
            const deltaY = e.clientY - this.panStartY;
            
            const workspace = document.getElementById('workspaceInner');
            const newPanX = this.originalPanX + deltaX;
            const newPanY = this.originalPanY + deltaY;
            this.panX = newPanX;
            this.panY = newPanY;
            // Apply scale first so translate values are in screen pixels (not scaled)
            workspace.style.transform = `scale(${this.scale}) translate(${newPanX}px, ${newPanY}px)`;
            return;
        }
        
        if (this.isSelecting) {
            const workspace = document.querySelector('.workspace');
            const rect = workspace.getBoundingClientRect();
            
            this.selectionEnd = {
                x: e.clientX - rect.left,
                y: e.clientY - rect.top
            };
            
            this.updateSelectionRect();
            return;
        }

        if (this.isConnecting && this.connectionStart) {
            this.renderTemporaryConnection(e);
            return;
        }

        if (!this.isDragging || !this.selectedObject) {
            return;
        }

        const workspaceInner = document.getElementById('workspaceInner');
        const rect = workspaceInner.getBoundingClientRect();
        const scale = this.scale;
        
        let newX = (e.clientX - rect.left) / scale - this.dragStartX;
        let newY = (e.clientY - rect.top) / scale - this.dragStartY;

        const gridSize = 20;
        newX = Math.round(newX / gridSize) * gridSize;
        newY = Math.round(newY / gridSize) * gridSize;

        const container = document.getElementById('objectsContainer');
        const containerRect = container.getBoundingClientRect();
        newX = Math.max(0, Math.min(newX, containerRect.width / scale - 80));
        newY = Math.max(0, Math.min(newY, containerRect.height / scale - 80));

        this.selectedObject.x = newX;
        this.selectedObject.y = newY;
        
        this.selectedObject.element.style.left = newX + 'px';
        this.selectedObject.element.style.top = newY + 'px';

        this.renderConnections();
    }

    renderTemporaryConnection(e) {
        const tempLine = document.getElementById('tempConnection');
        if (tempLine) tempLine.remove();

        const fromObject = this.connectionStart;
        const workspaceInner = document.getElementById('workspaceInner');
        const rect = workspaceInner.getBoundingClientRect();
        const scale = this.scale;
        
        const fromX = fromObject.x + 40;
        const fromY = fromObject.y + 40;
        
        const toX = (e.clientX - rect.left) / scale;
        const toY = (e.clientY - rect.top) / scale;

        const connectionsLayer = document.getElementById('connectionsLayer');
        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        
        line.setAttribute('id', 'tempConnection');
        line.setAttribute('x1', fromX);
        line.setAttribute('y1', fromY);
        line.setAttribute('x2', toX);
        line.setAttribute('y2', toY);
        line.setAttribute('class', `connection ${this.selectedCableType} highlight`);
        line.setAttribute('stroke-dasharray', '5,5');
        line.setAttribute('marker-end', 'url(#arrowhead)');
        
        connectionsLayer.appendChild(line);
    }

    handleMouseUp(e) {
        if (this.isPanning) {
            this.isPanning = false;
            document.body.style.cursor = '';
        }
        
        if (this.isSelecting) {
            this.finishSelection();
        }

        if (this.isConnecting && this.connectionStart) {
            const tempLine = document.getElementById('tempConnection');
            if (tempLine) tempLine.remove();
        }

        if (this.isDragging && this.selectedObject) {
            console.log('–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:', this.selectedObject.id);
            
            this.isDragging = false;
            this.selectedObject.element.style.cursor = 'move';
            this.selectedObject.element.style.zIndex = '';
            
            this.updatePlacedObjectsList();
            this.saveState();
        }
    }

    selectObject(object) {
        if (this.isDragging || this.isConnecting) return;
        
        // –°–Ω–∏–º–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–º –≤—ã–±–æ—Ä–µ
        if (this.multiSelectedObjects.length > 0) {
            this.clearMultiSelection();
        }
        
        console.log('–í—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç:', object.id);
        
        document.querySelectorAll('.placed-object').forEach(el => {
            el.classList.remove('selected');
        });
        
        object.element.classList.add('selected');
        this.selectedObject = object;
    }

    handleKeyDown(e) {
        // Ctrl+Z - –æ—Ç–º–µ–Ω–∞
        if ((e.ctrlKey || e.metaKey) && e.key === 'z') {
            e.preventDefault();
            this.undo();
            return;
        }
        
        // Ctrl+Y - –ø–æ–≤—Ç–æ—Ä
        if ((e.ctrlKey || e.metaKey) && e.key === 'y') {
            e.preventDefault();
            this.redo();
            return;
        }

        // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ Ctrl + +/-
        if ((e.ctrlKey || e.metaKey) && (e.key === '+' || e.key === '=')) {
            e.preventDefault();
            this.zoomIn();
            return;
        }

        if ((e.ctrlKey || e.metaKey) && e.key === '-') {
            e.preventDefault();
            this.zoomOut();
            return;
        }

        if ((e.ctrlKey || e.metaKey) && e.key === '0') {
            e.preventDefault();
            this.zoomReset();
            return;
        }

        // Delete - —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã
        if (e.key === 'Delete') {
            if (this.multiSelectedObjects.length > 0) {
                this.deleteMultipleObjects();
            } else if (this.selectedObject) {
                console.log('–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:', this.selectedObject.id);
                this.connections = this.connections.filter(conn => 
                    conn.from !== this.selectedObject.id && conn.to !== this.selectedObject.id
                );
                this.deleteObject(this.selectedObject);
                this.updateConnectionsList();
                this.renderConnections();
                this.saveState();
            }
            return;
        }
        
        // –°—Ç—Ä–µ–ª–∫–∏ - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if (this.selectedObject && !this.isDragging) {
            const step = 20;
            let newX = this.selectedObject.x;
            let newY = this.selectedObject.y;
            
            switch(e.key) {
                case 'ArrowLeft':
                    newX -= step;
                    break;
                case 'ArrowRight':
                    newX += step;
                    break;
                case 'ArrowUp':
                    newY -= step;
                    break;
                case 'ArrowDown':
                    newY += step;
                    break;
            }
            
            const container = document.getElementById('objectsContainer');
            const rect = container.getBoundingClientRect();
            const scale = this.scale;
            
            newX = Math.max(0, Math.min(newX, rect.width / scale - 80));
            newY = Math.max(0, Math.min(newY, rect.height / scale - 80));
            
            this.selectedObject.x = newX;
            this.selectedObject.y = newY;
            this.selectedObject.element.style.left = newX + 'px';
            this.selectedObject.element.style.top = newY + 'px';
            
            this.updatePlacedObjectsList();
            this.renderConnections();
            this.saveState();
        }
    }

    deleteObject(object) {
        const index = this.placedObjects.findIndex(obj => obj.id === object.id);
        if (index !== -1) {
            this.placedObjects.splice(index, 1);
            object.element.remove();
            this.selectedObject = null;
            this.updatePlacedObjectsList();
        }
    }

    updatePlacedObjectsList() {
        const list = document.getElementById('placedObjectsList');
        list.innerHTML = '';
        
        const icons = {
            router: 'üîÑ',
            switch: 'üîÄ',
            server: 'üñ•Ô∏è',
            pc: 'üíª',
            firewall: 'üî•'
        };
        
        const labels = {
            router: '–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä',
            switch: '–ö–æ–º–º—É—Ç–∞—Ç–æ—Ä',
            server: '–°–µ—Ä–≤–µ—Ä',
            pc: '–ö–æ–º–ø—å—é—Ç–µ—Ä',
            firewall: '–§–∞–µ—Ä–≤–æ–ª'
        };
        
        this.placedObjects.forEach(obj => {
            const item = document.createElement('div');
            item.className = 'placed-object-item';
            item.innerHTML = `
                <span class="icon">${icons[obj.type]}</span>
                <span>${labels[obj.type]} (${obj.x}, ${obj.y})</span>
            `;
            list.appendChild(item);
        });
    }

    exportToJSON() {
        const exportData = {
            version: "1.0",
            createdAt: new Date().toISOString(),
            objects: this.placedObjects.map(obj => ({
                id: obj.id,
                type: obj.type,
                x: obj.x,
                y: obj.y
            })),
            connections: this.connections.map(conn => ({
                from: conn.from,
                to: conn.to,
                type: conn.type
            }))
        };

        const dataStr = JSON.stringify(exportData, null, 2);
        const dataBlob = new Blob([dataStr], { type: "application/json" });
        
        const url = URL.createObjectURL(dataBlob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `network-diagram-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
        
        console.log('–°—Ö–µ–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞:', exportData);
        alert('–°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ JSON —Ñ–∞–π–ª!');
    }

    importFromJSON(file) {
        const reader = new FileReader();
        
        reader.onload = (e) => {
            try {
                const data = JSON.parse(e.target.result);
                
                this.placedObjects.forEach(obj => {
                    if (obj.element) obj.element.remove();
                });
                this.placedObjects = [];
                this.connections = [];
                this.selectedObject = null;
                this.multiSelectedObjects = [];
                
                data.objects.forEach(objData => {
                    this.createObjectFromData(objData);
                });

                if (data.connections) {
                    data.connections.forEach(connData => {
                        this.connections.push({
                            id: 'conn_' + Date.now(),
                            from: connData.from,
                            to: connData.to,
                            type: connData.type
                        });
                    });
                    this.renderConnections();
                    this.updateConnectionsList();
                }
                
                this.updatePlacedObjectsList();
                this.saveState();
                console.log('–°—Ö–µ–º–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞:', data);
                alert(`–°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞! –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${data.objects.length}, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${data.connections ? data.connections.length : 0}`);
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.');
            }
        };
        
        reader.readAsText(file);
    }

    createObjectFromData(objData) {
        const object = {
            id: objData.id,
            type: objData.type,
            x: objData.x,
            y: objData.y,
            element: null,
            connectionPoint: null
        };

        this.placedObjects.push(object);
        this.renderObject(object);
    }

    clearWorkspace() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë –ø–æ–ª–µ? –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
            this.placedObjects.forEach(obj => {
                if (obj.element) obj.element.remove();
            });
            this.placedObjects = [];
            this.connections = [];
            this.selectedObject = null;
            this.multiSelectedObjects = [];
            this.updatePlacedObjectsList();
            this.updateConnectionsList();
            this.renderConnections();
            this.saveState();
            console.log('–†–∞–±–æ—á–µ–µ –ø–æ–ª–µ –æ—á–∏—â–µ–Ω–æ');
        }
    }

    saveState() {
        if (this.historyIndex < this.history.length - 1) {
            this.history = this.history.slice(0, this.historyIndex + 1);
        }

        const state = {
            objects: this.placedObjects.map(obj => ({
                id: obj.id,
                type: obj.type,
                x: obj.x,
                y: obj.y
            })),
            connections: this.connections.map(conn => ({
                from: conn.from,
                to: conn.to,
                type: conn.type
            }))
        };

        this.history.push(JSON.stringify(state));
        this.historyIndex++;

        if (this.history.length > this.maxHistorySize) {
            this.history.shift();
            this.historyIndex--;
        }

        console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ò—Å—Ç–æ—Ä–∏—è:', this.history.length, '–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å:', this.historyIndex);
    }

    undo() {
        if (this.historyIndex > 0) {
            this.historyIndex--;
            this.restoreState();
            console.log('–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è. –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:', this.historyIndex);
        } else {
            console.log('–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã');
        }
    }

    redo() {
        if (this.historyIndex < this.history.length - 1) {
            this.historyIndex++;
            this.restoreState();
            console.log('–ü–æ–≤—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è. –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:', this.historyIndex);
        } else {
            console.log('–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞');
        }
    }

    restoreState() {
        const state = JSON.parse(this.history[this.historyIndex]);
        
        this.placedObjects.forEach(obj => {
            if (obj.element) obj.element.remove();
        });
        this.placedObjects = [];
        this.connections = [];
        this.selectedObject = null;
        this.multiSelectedObjects = [];

        state.objects.forEach(objData => {
            const object = {
                id: objData.id,
                type: objData.type,
                x: objData.x,
                y: objData.y,
                element: null,
                connectionPoint: null
            };
            this.placedObjects.push(object);
            this.renderObject(object);
        });

        if (state.connections) {
            state.connections.forEach(connData => {
                this.connections.push({
                    id: 'conn_' + Date.now(),
                    from: connData.from,
                    to: connData.to,
                    type: connData.type
                });
            });
            this.renderConnections();
            this.updateConnectionsList();
        }

        this.updatePlacedObjectsList();
        console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û–±—ä–µ–∫—Ç–æ–≤:', this.placedObjects.length, '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', this.connections.length);
    }
}

document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    new NetworkDiagram();
});